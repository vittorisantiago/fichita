@page "/tablero-principal"
@using Microsoft.Extensions.Configuration
@using System.Threading.Tasks
@using TableroApuestas.Models
@using TableroApuestas.Data
@using System.Data
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject AccesoDatos AccesoDatos

<title>Tablero Principal - Apuestas</title>

<head>
    <link href="css/tablero-principal.css" rel="stylesheet" />
</head>

<div class="contenedor-botones">
    <a href="/modificar-objetivos" class="boton-modificar-objetivos">Modificar Objetivos</a>
</div>

<h1 class="titulo">Deportes</h1>

<div class="seccion">
    <h2>Futbol</h2>
    <button @onclick='() => MostrarTablero("futbol")' class="ver-detalle">Ver Detalle</button>
    <div class="tablero">
        <table class="tabla">
            <thead>
                <tr>
                    <th>Monto</th>
                    <th>Objetivo</th>
                    <th>Estado</th>
                    <th>Acción</th>
                </tr>
            </thead>
            <tbody>
                @if (deporteSeleccionado == "futbol" && datosFutbol != null && datosFutbol.Rows.Count > 0)
                {
                    foreach (DataRow row in datosFutbol.Rows)
                    {
                        <tr>
                            <td>$@montoFutbol</td>
                            <td>$@row["objetivo"]</td>
                            <td class="@CalcularClaseEstado(montoFutbol, Convert.ToDecimal(row["objetivo"]))">@CalcularEstado(montoFutbol, Convert.ToDecimal(row["objetivo"]))</td>
                            <button @onclick='() => VerMas("futbol")' class="ver-mas-button">Ver más</button>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<div class="seccion">
    <h2>Basquet</h2>
    <button @onclick='() => MostrarTablero("basquet")' class="ver-detalle">Ver Detalle</button>
    <div class="tablero">
        <table class="tabla">
            <thead>
                <tr>
                    <th>Monto</th>
                    <th>Objetivo</th>
                    <th>Estado</th>
                    <th>Acción</th>
                </tr>
            </thead>
            <tbody>
                @if (deporteSeleccionado == "basquet" && datosBasquet != null && datosBasquet.Rows.Count > 0)
                {
                    foreach (DataRow row in datosBasquet.Rows)
                    {
                        <tr>
                            <td>$@montoBasquet</td>
                            <td>$@row["objetivo"]</td>
                            <td class="@CalcularClaseEstado(montoBasquet, Convert.ToDecimal(row["objetivo"]))">@CalcularEstado(montoBasquet, Convert.ToDecimal(row["objetivo"]))</td>
                            <button @onclick='() => VerMas("basquet")' class="ver-mas-button">Ver más</button>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<div class="seccion">
    <h2>Tenis</h2>
    <button @onclick='() => MostrarTablero("tenis")' class="ver-detalle">Ver Detalle</button>
    <div class="tablero">
        <table class="tabla">
            <thead>
                <tr>
                    <th>Monto</th>
                    <th>Objetivo</th>
                    <th>Estado</th>
                    <th>Acción</th>
                </tr>
            </thead>
            <tbody>
                @if (deporteSeleccionado == "tenis" && datosTenis != null && datosTenis.Rows.Count > 0)
                {
                    foreach (DataRow row in datosTenis.Rows)
                    {
                        <tr>
                            <td>$@montoTenis</td>
                            <td>$@row["objetivo"]</td>
                            <td class="@CalcularClaseEstado(montoTenis, Convert.ToDecimal(row["objetivo"]))">@CalcularEstado(montoTenis, Convert.ToDecimal(row["objetivo"]))</td>
                            <button @onclick='() => VerMas("tenis")' class="ver-mas-button">Ver más</button>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>



@code {
    private bool mostrarTablero = false;
    private string deporteSeleccionado = "";
    private DataTable datosFutbol = new DataTable();
    private DataTable datosBasquet = new DataTable();
    private DataTable datosTenis = new DataTable();
    private decimal montoFutbol;
    private decimal montoBasquet;
    private decimal montoTenis;

    private async Task MostrarTablero(string nombreDeporte)
    {
        if (deporteSeleccionado != nombreDeporte)
        {
            deporteSeleccionado = nombreDeporte;
            await CargarDatosDeporte(nombreDeporte);
            mostrarTablero = true;
        }
        else
        {
            // Si se hace clic en el mismo deporte, ocultar el detalle
            deporteSeleccionado = "";
            mostrarTablero = false;
        }
    }

    private async Task CargarDatosDeporte(string nombreDeporte)
    {
        // Llamar a AccesoDatos para obtener datos del deporte
        switch (nombreDeporte)
        {
            case "futbol":
                datosFutbol = await AccesoDatos.ObtenerDatosDeporteCompletoPorNombreAsync("Futbol");
                montoFutbol = await AccesoDatos.ObtenerMontoTotalDeporteAsync("futbol");
                break;
            case "basquet":
                datosBasquet = await AccesoDatos.ObtenerDatosDeporteCompletoPorNombreAsync("Basquet");
                montoBasquet = await AccesoDatos.ObtenerMontoTotalDeporteAsync("basquet");
                break;
            case "tenis":
                datosTenis = await AccesoDatos.ObtenerDatosDeporteCompletoPorNombreAsync("Tenis");
                montoTenis = await AccesoDatos.ObtenerMontoTotalDeporteAsync("tenis");
                break;
        }
    }

    // Método para calcular el estado
    private string CalcularEstado(decimal monto, decimal objetivo)
    {
        decimal diferencia = monto - objetivo;

        if (Math.Abs(diferencia) <= 10000)
        {
            return "CUMPLE OBJETIVO";
        }
        else if (diferencia > 20000)
        {
            return "OBJETIVO SUPERADO";
        }
        else if (diferencia < -20000)
        {
            return "NO CUMPLE OBJETIVO";
        }
        else
        {
            return "En proceso";
        }
    }

    private string CalcularClaseEstado(decimal monto, decimal objetivo)
    {
        decimal diferencia = monto - objetivo;

        if (Math.Abs(diferencia) <= 10000)
        {
            return "cumple-objetivo";
        }
        else if (diferencia > 20000)
        {
            return "objetivo-superado";
        }
        else if (diferencia < -20000)
        {
            return "no-cumple-objetivo";
        }
        else
        {
            return "";
        }
    }

    private void VerMas(string deporte)
    {
        switch (deporte)
        {
            case "futbol":
                NavigationManager.NavigateTo("/tablero-futbol");
                break;
            case "basquet":
                NavigationManager.NavigateTo("/tablero-basquet");
                break;
            case "tenis":
                NavigationManager.NavigateTo("/tablero-tenis");
                break;
        }
    }

}
